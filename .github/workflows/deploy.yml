name: Auto Plugin Deployment

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      branch:
        description: 'Select branch to deploy'
        required: false
        type: string
        default: ""

env:
  PROD_MOODLE_ROOT: /var/www/html/moodle-new
  DEV_MOODLE_ROOT: /var/www/html/moodle-dev

jobs:
  find-changed:
    name: Find Changed Directories
    runs-on: ubuntu-latest
    outputs:
      changed_dirs: ${{ steps.list_dirs.outputs.changed_dirs }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes in specified directories
        id: filter
        uses: dorny/paths-filter@v3
        with:
          list-files: json
          filters: |
            auth:
                - "plugins/auth/**"
            blocks:
                - "plugins/blocks/**"
            customfield:
                - "plugins/customfield/**"
            enrol:
                - "plugins/enrol/**"
            local:
                - "plugins/local/**"
            mod:
                - "plugins/mod/**"
            theme:
                - "plugins/theme/**"

      - name: Extract changed directories
        id: list_dirs
        run: |
          all_changed_files="${{ steps.filter.outputs.auth_files }},${{ steps.filter.outputs.blocks_files }},${{ steps.filter.outputs.customfield_files }},${{ steps.filter.outputs.enrol_files }},${{ steps.filter.outputs.local_files }},${{ steps.filter.outputs.mod_files }},${{ steps.filter.outputs.theme_files }}"

          dirs=$(echo "$all_changed_files" \
                  | sed 's/[][]//g' \
                  | tr ',' '\n' \
                  | sed 's/^ *//; s/ *$//' \
                  | grep -v '^$' \
                  | awk -F/ '{
                      if ($2 == "auth" || $2 == "blocks" || $2 == "theme") {
                          print $1 "/" $2
                      }
                      else if ($2 == "customfield" || $2 == "enrol" || $2 == "local" || $2 == "mod") {
                          if (NF >= 3) print $1 "/" $2 "/" $3
                          else print $0
                      }
                      else {
                          print $0
                      }
                  }' \
                  | sort -u)

          if [[ -z "$dirs" ]]; then
            json="[]"
          else
            json=$(jq -Rn '[inputs | select(length>0)]' <<< "$dirs")
          fi
          echo "changed_dirs=$json" >> "$GITHUB_OUTPUT"

  package:
    name: Package Changed Directories
    needs: find-changed
    if: ${{ needs.find-changed.outputs.changed_dirs != '[]' }}
    strategy:
      matrix:
        dir: ${{ fromJson(needs.find-changed.outputs.changed_dirs) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Package Directory
        id: zip
        run: |
          SAFE_NAME=$(echo "${{ matrix.dir }}" | tr '/' '-')
          ZIP_FILE="${SAFE_NAME}-$(date +'%Y%m%d-%H%M%S').zip"
          
          cd "${{ matrix.dir }}"
          zip -qr "../../$ZIP_FILE" .
          cd -
          
          echo "zip_file=$ZIP_FILE" >> "$GITHUB_OUTPUT"
          echo "safe_name=$SAFE_NAME" >> "$GITHUB_OUTPUT"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ steps.zip.outputs.safe_name }}
          path: ${{ steps.zip.outputs.zip_file }}
          retention-days: 5

  deploy:
    name: Deploy to Moodle Instance
    needs: [find-changed, package]
    if: ${{ needs.find-changed.outputs.changed_dirs != '[]' }}
    strategy:
      matrix:
        dir: ${{ fromJson(needs.find-changed.outputs.changed_dirs) }}
    runs-on: self-hosted
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-package-$(echo "${{ matrix.dir }}" | tr '/' '-')
          path: /tmp

      - name: Determine Moodle Root Path
        id: determine-path
        run: |
          branch="${{ github.event.inputs.branch || github.ref_name }}"
          case "$branch" in
            dev)  MOODLE_PATH=${{ env.DEV_MOODLE_ROOT }} ;;
            main) MOODLE_PATH=${{ env.PROD_MOODLE_ROOT }} ;;
            *) MOODLE_PATH=${{ env.DEV_MOODLE_ROOT }} ;;
          esac
          echo "MOODLE_PATH=$MOODLE_PATH" >> "$GITHUB_ENV"

      - name: Backup current directory
        run: |
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          TARGET_DIR="$MOODLE_PATH/${{ matrix.dir }}"
          BACKUP_DIR="/tmp/moodle-backup"
          BACKUP_FILE="${BACKUP_DIR}/$(basename "${{ matrix.dir }}")-backup-${TIMESTAMP}.zip"
          
          sudo mkdir -p "$BACKUP_DIR"
          if [ -d "$TARGET_DIR" ]; then
            sudo zip -rq "$BACKUP_FILE" "$TARGET_DIR"
            echo "Created backup: $BACKUP_FILE"
          else
            echo "No existing directory to backup: $TARGET_DIR"
          fi

      - name: Deploy to Moodle
        run: |
          DEPLOY_DIR="$MOODLE_PATH/$(dirname "${{ matrix.dir }}")"
          ZIP_PATTERN="/tmp/$(echo "${{ matrix.dir }}" | tr '/' '-')-*.zip"
          ZIP_FILE=$(ls -t $ZIP_PATTERN | head -n1)
          
          echo "Deploying to: $DEPLOY_DIR"
          echo "Using zip file: $ZIP_FILE"
          
          if [ -f "$ZIP_FILE" ]; then
            sudo mkdir -p "$DEPLOY_DIR"
            sudo unzip -qo "$ZIP_FILE" -d "$DEPLOY_DIR"
            sudo chown -R www-data:www-data "$DEPLOY_DIR/$(basename "${{ matrix.dir }}")"
            echo "Successfully deployed ${{ matrix.dir }}"
          else
            echo "Error: Missing deployment package!"
            exit 1
          fi