name: Moodle Plugin Deployment

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      branch:
        description: 'Deployment branch'
        required: false
        type: string
        default: ""

env:
  PROD_ROOT: /var/www/html/moodle-new
  DEV_ROOT: /var/www/html/moodle-dev

jobs:
  detect-changes:
    name: Identify Changed Plugins
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.process-changes.outputs.dirs }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find Changed Files
        id: file-filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            auth:
              - 'plugins/auth/**'
            blocks:
              - 'plugins/blocks/**'
            customfield:
              - 'plugins/customfield/**'
            enrol:
              - 'plugins/enrol/**'
            local:
              - 'plugins/local/**'
            mod:
              - 'plugins/mod/**'
            theme:
              - 'plugins/theme/**'

      - name: Process Changes
        id: process-changes
        run: |
          echo "⏳ Starting change processing..."
          
          # Load all changed files
          declare -A plugin_map
          
          process_files() {
            local json_input=$1
            while IFS= read -r file; do
              IFS='/' read -ra parts <<< "$file"
              
              if [[ ${#parts[@]} -ge 3 ]]; then
                case "${parts[1]}" in
                  auth|blocks|theme)
                    key="${parts[0]}/${parts[1]}"
                    ;;
                  customfield|enrol|local|mod)
                    key="${parts[0]}/${parts[1]}/${parts[2]}"
                    ;;
                  *)
                    key="$file"
                    ;;
                esac
                plugin_map["$key"]=1
              fi
            done < <(jq -r '.[]' <<< "$json_input")
          }

          echo "🔍 Processing auth files..."
          process_files '${{ steps.file-filter.outputs.auth_files }}'
          
          echo "🔍 Processing blocks files..."
          process_files '${{ steps.file-filter.outputs.blocks_files }}'
          
          echo "🔍 Processing customfield files..."
          process_files '${{ steps.file-filter.outputs.customfield_files }}'
          
          echo "🔍 Processing enrol files..."
          process_files '${{ steps.file-filter.outputs.enrol_files }}'
          
          echo "🔍 Processing local files..."
          process_files '${{ steps.file-filter.outputs.local_files }}'
          
          echo "🔍 Processing mod files..."
          process_files '${{ steps.file-filter.outputs.mod_files }}'
          
          echo "🔍 Processing theme files..."
          process_files '${{ steps.file-filter.outputs.theme_files }}'

          # Generate sorted directory list
          dir_list=$(printf "%s\n" "${!plugin_map[@]}" | sort -u)
          echo "📂 Identified directories:"
          echo "$dir_list"

          # Create JSON array
          json_dirs=$(jq -n '$ARGS.positional' --args ${dir_list})
          echo "✅ Final directory list: $json_dirs"
          
          echo "dirs=$json_dirs" >> $GITHUB_OUTPUT

  package-plugins:
    name: Create Deployment Packages
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.directories != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: ${{ fromJson(needs.detect-changes.outputs.directories) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Plugin Bundle
        id: package
        run: |
          echo "📦 Packaging ${{ matrix.dir }}..."
          safe_name=$(echo "${{ matrix.dir }}" | tr '/' '-')
          zip_file="${safe_name}-$(date +%Y%m%d-%H%M%S).zip"
          
          # Create archive maintaining directory structure
          cd "$(dirname "${{ matrix.dir }}")"
          zip -qr "$zip_file" "$(basename "${{ matrix.dir }}")"
          
          echo "📄 Created package: $zip_file ($(du -h $zip_file | cut -f1))"
          echo "zip=$zip_file" >> $GITHUB_OUTPUT
          echo "name=$safe_name" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pkg-${{ steps.package.outputs.name }}
          path: ${{ steps.package.outputs.zip }}
          retention-days: 3

  deploy-plugins:
    name: Deploy to Server
    needs: [detect-changes, package-plugins]
    if: ${{ needs.detect-changes.outputs.directories != '[]' }}
    runs-on: self-hosted
    strategy:
      matrix:
        dir: ${{ fromJson(needs.detect-changes.outputs.directories) }}
    steps:
      - name: Retrieve Package
        uses: actions/download-artifact@v4
        with:
          name: pkg-$(echo "${{ matrix.dir }}" | tr '/' '-')
          path: /tmp/deployment

      - name: Determine Environment
        run: |
          case "${{ github.event.inputs.branch || github.ref_name }}" in
            main) echo "ROOT=$PROD_ROOT" >> $GITHUB_ENV ;;
            *)    echo "ROOT=$DEV_ROOT" >> $GITHUB_ENV ;;
          esac
          echo "🌐 Using deployment root: $ROOT"

      - name: Safe Deployment
        run: |
          set -eo pipefail
          target_dir="$ROOT/${{ matrix.dir }}"
          backup_dir="/tmp/moodle-backups/$(date +%Y%m%d)"
          zip_file="/tmp/deployment/$(ls /tmp/deployment | grep -F "$(echo "${{ matrix.dir }}" | tr '/' '-'))"

          echo "🔄 Starting deployment to: $target_dir"
          
          # Create backup
          sudo mkdir -p "$backup_dir"
          if [ -d "$target_dir" ]; then
            echo "📂 Creating backup..."
            sudo tar -czf "$backup_dir/$(basename "$target_dir").tgz" -C "$(dirname "$target_dir")" "$(basename "$target_dir")"
          fi
          
          # Clean deployment
          echo "🧹 Removing old files..."
          sudo rm -rf "$target_dir"
          
          # Extract new files
          echo "🚚 Deploying new version..."
          sudo mkdir -p "$(dirname "$target_dir")"
          sudo unzip -q "$zip_file" -d "$(dirname "$target_dir")"
          
          # Set permissions
          echo "🔒 Setting permissions..."
          sudo chown -R www-data:www-data "$target_dir"
          sudo find "$target_dir" -type d -exec chmod 755 {} \;
          sudo find "$target_dir" -type f -exec chmod 644 {} \;
          
          echo "🎉 Successfully deployed ${{ matrix.dir }}!"