name: Moodle Plugin Workflow

on:
  push:
    branches:
      - new-devops
  workflow_dispatch:
    inputs:
      branch:
        description: 'Select deployment branch'
        required: false
        type: choice
        default: 'new-devops'
        options:
          - 'new-devops'

jobs:
  detect-changes:
    name: Identify Changed Plugins
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.process-changes.outputs.dirs }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history to compare changes

      - name: Find Plugin Directories
        id: find-plugins
        run: |
          # Find directories containing version.php under plugins/
          plugin_dirs=$(find plugins -type f -name version.php -exec dirname {} \; | sort -u)
          echo "plugin_dirs<<EOF" >> $GITHUB_OUTPUT
          echo "$plugin_dirs" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Detect Changed Files
        id: file-filter
        uses: dorny/paths-filter@v3
        with:
          list-files: json
          filters: |
            ${{ steps.find-plugins.outputs.plugin_dirs }}

      - name: Process Changes
        id: process-changes
        run: |
          # Initialize an associative array to track changed directories
          declare -A plugin_map
          # Loop through each plugin directory
          for dir in $(echo "${{ steps.find-plugins.outputs.plugin_dirs }}"); do
            # Convert directory path to a filter name (e.g., plugins_auth_oidc)
            filter_name=$(echo "$dir" | tr '/' '_')
            # Get the list of changed files for this directory
            raw_input="${{ steps.file-filter.outputs.${filter_name}_files }}"
            # If there are changes (non-empty and not empty array), mark the directory
            if [[ -n "$raw_input" && "$raw_input" != "[]" ]]; then
              plugin_map["$dir"]=1
            fi
          done
          # Convert the changed directories to a sorted list
          dir_list=$(printf "%s\n" "${!plugin_map[@]}" | sort -u)
          # If no changes, output an empty JSON array; otherwise, format as JSON
          if [[ -z "$dir_list" ]]; then
            json_dirs="[]"
          else
            json_dirs=$(jq -nc '$ARGS.positional' --args ${dir_list})
          fi
          echo "dirs=$json_dirs" >> $GITHUB_OUTPUT

  package-plugins:
    name: Package Changed Plugins
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.directories != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: ${{ fromJson(needs.detect-changes.outputs.directories) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Plugin Bundle
        id: package
        run: |
          # Compute a safe name by replacing '/' with '-'
          safe_name=$(echo "${{ matrix.dir }}" | tr '/' '-')
          zip_file="${safe_name}-$(date +%Y%m%d-%H%M%S).zip"
          
          # Change into the parent directory and zip the plugin folder
          cd "$(dirname "${{ matrix.dir }}")"
          zip -qr "$zip_file" "$(basename "${{ matrix.dir }}")"
          
          zip_path="$(pwd)/$zip_file"
          echo "Created package: $zip_path"
          echo "zip=$zip_path" >> $GITHUB_OUTPUT
          echo "name=$safe_name" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pkg-${{ steps.package.outputs.name }}
          path: ${{ steps.package.outputs.zip }}
          retention-days: 3
