name: Moodle Plugin Deployment

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      branch:
        description: 'Deployment branch'
        required: false
        type: string
        default: ""

env:
  PROD_ROOT: /var/www/html/moodle-new
  DEV_ROOT: /var/www/html/moodle-dev

jobs:
  detect-changes:
    name: Identify Changed Plugins
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.process-changes.outputs.dirs }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find Changed Files
        id: file-filter
        uses: dorny/paths-filter@v3
        with:
          list-files: json
          filters: |
            auth:
              - 'plugins/auth/**'
            blocks:
              - 'plugins/blocks/**'
            customfield:
              - 'plugins/customfield/**'
            enrol:
              - 'plugins/enrol/**'
            local:
              - 'plugins/local/**'
            mod:
              - 'plugins/mod/**'
            theme:
              - 'plugins/theme/**'
      - name: Process Changes
        id: process-changes
        run: |
          echo "Starting change processing..."
          
          declare -A plugin_map
          
          process_files() {
            local filter_name=$1
            local raw_input=$2
            echo "Processing $filter_name files: $raw_input"
            
            if [[ -z "$raw_input" || "$raw_input" == "[]" ]]; then
              echo "No files found for $filter_name"
              return
            fi
            while IFS= read -r file; do
              file=$(echo "$file" | sed 's/^ *//; s/ *$//; s/"//g')
              [[ -z "$file" ]] && continue
              
              echo "Found file: $file"
              IFS='/' read -ra parts <<< "$file"
              
              if [[ ${#parts[@]} -ge 3 ]]; then
                case "${parts[1]}" in
                  auth|blocks|theme)
                    key="${parts[0]}/${parts[1]}"
                    ;;
                  customfield|enrol|local|mod)
                    key="${parts[0]}/${parts[1]}/${parts[2]}"
                    ;;
                  *)
                    key="$file"
                    ;;
                esac
                plugin_map["$key"]=1
                echo "Added directory: $key"
              fi
            done < <(echo "$raw_input" | sed 's/[][]//g' | tr ',' '\n')
          }
          process_files "auth" "${{ steps.file-filter.outputs.auth_files }}"
          process_files "blocks" "${{ steps.file-filter.outputs.blocks_files }}"
          process_files "customfield" "${{ steps.file-filter.outputs.customfield_files }}"
          process_files "enrol" "${{ steps.file-filter.outputs.enrol_files }}"
          process_files "local" "${{ steps.file-filter.outputs.local_files }}"
          process_files "mod" "${{ steps.file-filter.outputs.mod_files }}"
          process_files "theme" "${{ steps.file-filter.outputs.theme_files }}"
          dir_list=$(printf "%s\n" "${!plugin_map[@]}" | sort -u)
          echo "Identified directories:"
          echo "$dir_list"
          if [[ -z "$dir_list" ]]; then
            json_dirs="[]"
          else
            json_dirs=$(jq -nc '$ARGS.positional' --args ${dir_list})
          fi
          
          echo "Final directory list: $json_dirs"
          echo "dirs=$json_dirs" >> $GITHUB_OUTPUT
  package-plugins:
    name: Create Deployment Packages
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.directories != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: ${{ fromJson(needs.detect-changes.outputs.directories) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Plugin Bundle
        id: package
        run: |
          echo "Packaging ${{ matrix.dir }}..."
          # Compute a safe name by replacing '/' with '-'
          safe_name=$(echo "${{ matrix.dir }}" | tr '/' '-')
          zip_file="${safe_name}-$(date +%Y%m%d-%H%M%S).zip"
          
          # Change into the parent directory of the plugin folder
          cd "$(dirname "${{ matrix.dir }}")"
          zip -qr "$zip_file" "$(basename "${{ matrix.dir }}")"
          
          zip_path="$(pwd)/$zip_file"
          echo "Created package: $zip_path ($(du -h "$zip_path" | cut -f1))"
          echo "zip=$zip_path" >> $GITHUB_OUTPUT
          echo "name=$safe_name" >> $GITHUB_OUTPUT
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pkg-${{ steps.package.outputs.name }}
          path: ${{ steps.package.outputs.zip }}
          retention-days: 3

  deploy-plugins:
    name: Deploy to Server
    needs: [detect-changes, package-plugins]
    if: ${{ needs.detect-changes.outputs.directories != '[]' }}
    runs-on: self-hosted
    strategy:
      matrix:
        dir: ${{ fromJson(needs.detect-changes.outputs.directories) }}
    steps:
      - name: Compute Safe Name
        id: compute-safe
        run: |
          safe_name=$(echo "${{ matrix.dir }}" | tr '/' '-')
          echo "safe_name=$safe_name" >> $GITHUB_OUTPUT
      - name: Retrieve Package
        uses: actions/download-artifact@v4
        with:
          name: pkg-${{ steps.compute-safe.outputs.safe_name }}
          path: /tmp/deployment

      - name: Determine Environment
        run: |
          case "${{ github.event.inputs.branch || github.ref_name }}" in
            main) echo "ROOT=$PROD_ROOT" >> $GITHUB_ENV ;;
            *)    echo "ROOT=$DEV_ROOT" >> $GITHUB_ENV ;;
          esac
          echo "Using deployment root: $(grep '^ROOT=' $GITHUB_ENV)"
      - name: Safe Deployment
        run: |
          set -eo pipefail
          # Remove the "plugins/" prefix if present so that the plugin is placed directly under ROOT
          deploy_subdir=$(echo "${{ matrix.dir }}" | sed 's|^plugins/||')
          target_dir="$ROOT/$deploy_subdir"
          backup_dir="/tmp/moodle-backups/$(date +%Y%m%d)"
          # Compute the safe name and use find to get the zip file path
          safe_name=$(echo "${{ matrix.dir }}" | tr '/' '-')
          echo "Computed safe_name: $safe_name"
          ## zip_file=$(find /tmp/deployment -maxdepth 1 -type f -name "${safe_name}-*.zip" | head -n 1)
          zip_file=$(ls -t /tmp/deployment/${safe_name}-*.zip 2>/dev/null | head -n 1)

          if [ -z "$zip_file" ]; then
            echo "Error: Zip file for $safe_name not found in /tmp/deployment"
            exit 1
          fi
          echo "Zip file found: $zip_file"
          echo "Backup directory: $backup_dir"
          echo "Target directory: $target_dir"
          
          echo "Listing contents of zip file:"
          unzip -l "$zip_file"
          
          echo "Starting deployment to: $target_dir"
          
          sudo mkdir -p "$backup_dir"
          if [ -d "$target_dir" ]; then
            echo "Creating backup of existing directory $target_dir..."
            sudo tar -czf "$backup_dir/$(basename "$target_dir").tgz" -C "$(dirname "$target_dir")" "$(basename "$target_dir")"
          fi
          
          echo "Removing old files at $target_dir..."
          sudo rm -rf "$target_dir"
          
          echo "Deploying new version from $zip_file..."
          # Extract the zip file into ROOT so that the zipped folder (e.g. auth) is created at $ROOT/auth
          sudo mkdir -p "$ROOT"
          sudo unzip -q "$zip_file" -d "$ROOT"
          
          echo "Listing deployed files in $target_dir:"
          ls -la "$target_dir"
          
          echo "Setting permissions on $target_dir..."
          sudo chown -R www-data:www-data "$target_dir"
          sudo find "$target_dir" -type d -exec chmod 755 {} \;
          sudo find "$target_dir" -type f -exec chmod 644 {} \;
          
          echo "Successfully deployed $deploy_subdir!"