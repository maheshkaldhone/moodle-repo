name: Moodle Plugin Deployment

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      branch:
        description: 'Deployment branch'
        required: false
        type: string
        default: ""

env:
  PROD_ROOT: /var/www/html/moodle
  DEV_ROOT: /var/www/html/moodle-dev

jobs:

  lint:
    name: Run Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          tools: composer

      - name: Install PHP_CodeSniffer & Moodle Standards
        run: |
            composer global config --no-plugins allow-plugins.dealerdirect/phpcodesniffer-composer-installer true


      - name: Run PHPCS Linting
        run: |
          ~/.composer/vendor/bin/phpcs --standard=moodle --ignore=*/vendor/* plugins/

  security-scan:
    name: Run Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get install wget -y
          wget -qO- https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo tee /etc/apt/trusted.gpg.d/trivy.asc
          echo "deb https://aquasecurity.github.io/trivy-repo/deb focal main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Run Trivy Scan
        run: trivy fs --exit-code 1 --severity HIGH,CRITICAL --ignore-unfixed .

  detect-changes:
    name: Identify Changed Plugins
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.process-changes.outputs.dirs }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find Changed Files
        id: file-filter
        uses: dorny/paths-filter@v3
        with:
          list-files: json
          filters: |
            plugins:
              - 'plugins/**'

      - name: Process Changes
        id: process-changes
        run: |
          changed_files=${{ steps.file-filter.outputs.plugins_files }}
          if [[ -z "$changed_files" || "$changed_files" == "[]" ]]; then
            echo "dirs=[]" >> $GITHUB_OUTPUT
          else
            directories=$(echo "$changed_files" | jq -r 'map(split("/")[0:3] | join("/")) | unique | .[]' | jq -nc '$ARGS.positional' --args)
            echo "dirs=$directories" >> $GITHUB_OUTPUT
          fi

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: mbstring, xml, intl
          tools: composer, phpunit

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run PHPUnit Tests
        run: vendor/bin/phpunit --configuration phpunit.xml.dist

  package-plugins:
    name: Create Deployment Packages
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.directories != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: ${{ fromJson(needs.detect-changes.outputs.directories) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Plugin Bundle
        id: package
        run: |
          safe_name=$(echo "${{ matrix.dir }}" | tr '/' '-')
          zip_file="${safe_name}-$(date +%Y%m%d-%H%M%S).zip"
          cd "$(dirname "${{ matrix.dir }}")"
          zip -qr "$zip_file" "$(basename "${{ matrix.dir }}")"
          echo "zip=$zip_file" >> $GITHUB_OUTPUT
          echo "name=$safe_name" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pkg-${{ steps.package.outputs.name }}
          path: ${{ steps.package.outputs.zip }}
          retention-days: 3

  deploy-plugins:
    name: Deploy to Server
    needs: [detect-changes, package-plugins]
    if: ${{ needs.detect-changes.outputs.directories != '[]' }}
    runs-on: self-hosted
    strategy:
      matrix:
        dir: ${{ fromJson(needs.detect-changes.outputs.directories) }}
    steps:
      - name: Compute Safe Name
        id: compute-safe
        run: |
          safe_name=$(echo "${{ matrix.dir }}" | tr '/' '-')
          echo "safe_name=$safe_name" >> $GITHUB_OUTPUT

      - name: Retrieve Package
        uses: actions/download-artifact@v4
        with:
          name: pkg-${{ steps.compute-safe.outputs.safe_name }}
          path: /tmp/deployment

      - name: Determine Environment
        run: |
          case "${{ github.event.inputs.branch || github.ref_name }}" in
            main) echo "ROOT=$PROD_ROOT" >> $GITHUB_ENV ;;
            *)    echo "ROOT=$DEV_ROOT" >> $GITHUB_ENV ;;
          esac

      - name: Backup Existing Plugin
        run: |
          deploy_subdir=$(echo "${{ matrix.dir }}" | sed 's|^plugins/||')
          target_dir="$ROOT/$deploy_subdir"
          backup_dir="/tmp/moodle-backups/$(date +%Y%m%d)"
          safe_name=$(echo "${{ matrix.dir }}" | tr '/' '-')
          if [ -d "$target_dir" ]; then
            sudo mkdir -p "$backup_dir"
            sudo tar -czf "$backup_dir/$(basename "$target_dir")-$(date +%H%M%S).tgz" -C "$(dirname "$target_dir")" "$(basename "$target_dir")"
          fi

      - name: Deploy Plugin
        run: |
          deploy_subdir=$(echo "${{ matrix.dir }}" | sed 's|^plugins/||')
          target_dir="$ROOT/$deploy_subdir"
          safe_name=$(echo "${{ matrix.dir }}" | tr '/' '-')
          zip_file=$(ls -t /tmp/deployment/${safe_name}-*.zip 2>/dev/null | head -n 1)
          [ -z "$zip_file" ] && { echo "Error: Zip file for $safe_name not found"; exit 1; }
          sudo rm -rf "$target_dir"
          sudo mkdir -p "$(dirname "$target_dir")"
          sudo unzip -q "$zip_file" -d "$(dirname "$target_dir")"
          sudo chown -R www-data:www-data "$target_dir"
          sudo find "$target_dir" -type d -exec chmod 755 {} \;
          sudo find "$target_dir" -type f -exec chmod 644 {} \;

      - name: Run Moodle Upgrade
        run: sudo -u www-data /usr/bin/php /var/www/html/moodle/admin/cli/upgrade.php --non-interactive
